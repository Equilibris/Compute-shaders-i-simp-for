#pragma kernel Update
#pragma kernel Render
#pragma kernel Init

#define Pi 3.1415
#define BoidThreadBlockX 64

RWTexture2D<float4> Result;

uint WIDTH, HEIGHT, now, deltaTime;

struct Boid
{
	float2 position;
	float angle;
	float speed;
};
Boid makeBoid(float2 position, float angle, float speed)
{
	Boid boid;
	boid.position = position;
	boid.angle = angle;
	boid.speed = speed;

	return boid;
}

RWStructuredBuffer<Boid> Boids;
uint count;

uint Hash(uint s)
{
	s ^= 2747636419u;
	s *= 2654435769u;
	s ^= s >> 16;
	s *= 2654435769u;
	s ^= s >> 16;
	s *= 2654435769u;
	return s;
}

// 2^32-1
float Random(uint seed) { return float(Hash(seed)) / 4294967295.0; }

float2 unitCircle(float angle) { return float2(cos(angle), sin(angle)); }

[numthreads(BoidThreadBlockX, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	Boids[id.x] = makeBoid(
		float2(Random(now + id.x) * WIDTH, Random(now + id.x + count) * HEIGHT),
		Random(now + id.x + 2 * count) * 2 * Pi, (Random(now + id.x + 3 * count) / 2 + 0.05));
}

[numthreads(BoidThreadBlockX, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= count) return;

	Boid this = Boids[id.x];

	Result[this.position] = 1;

	float distanceLerpedAngle = this.angle;

    float2 targetLocation = this.position;

	for (uint i = 0; i < count - 1; i++) {
		Boid current = Boids[i + (i >= id.x)];
        float d = distance(this.position, current.position);
		distanceLerpedAngle = lerp(this.angle, current.angle, 1 / (2 * d));
        targetLocation = lerp(this.angle, current.angle, 1/(2*d));
	}

	this.angle = distanceLerpedAngle + 0.1 * (Random(this.position.x + this.position.y * WIDTH + now * HEIGHT * WIDTH) - 0.5);

	float2 newPos = this.position + unitCircle(this.angle) * this.speed / 2 + float2(WIDTH, HEIGHT);
	this.position = newPos.xy % int2(WIDTH, HEIGHT);

	Boids[id.x] = this;
}

[numthreads(8, 8, 1)]
void Render(uint3 id : SV_DispatchThreadID)
{
	float4 sum;

	for (int x = -1; x <= 1; x++)
		for (int y = -1; y <= 1; y++)
			sum += Result[(id.xy + int2(x, y)) % int2(WIDTH, HEIGHT)];

	Result[id.xy] = Result[id.xy] - 0.01;
	// Result[id.xy] = clamp(sum / 9 - 0.001,0,1);
}
